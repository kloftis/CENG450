----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    15:09:15 02/04/2014 
-- Design Name: 
-- Module Name:    ALU - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

---- Uncomment the following library declaration if instantiating
---- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity ALU is
    Port ( in1 : in  STD_LOGIC_VECTOR (7 downto 0);
           in2 : in  STD_LOGIC_VECTOR (7 downto 0);
           alu_mode : in  STD_LOGIC_VECTOR (2 downto 0);
           clk : in  STD_LOGIC;
           rst : in  STD_LOGIC;
           result : out  STD_LOGIC_VECTOR (7 downto 0);
           z_flag : out  STD_LOGIC;
           n_flag : out  STD_LOGIC);
end ALU;

architecture Behavioral of ALU is

--signal result_temp: std_logic_vector(7 downto 0);
--signal a: signed;
--signal b: signed;

begin  
--write operation 
process(clk)  
	begin   
		if(clk='0' and clk'event) then
			if(rst='1') then
				n_flag <= '0';
				z_flag <= '0';
			elsif (alu_mode="000") then
				n_flag <= (signed(in1 NAND in2) < 0);
				z_flag <= (signed(in1 NAND in2) == 0);
			elsif (alu_mode="100") then
				n_flag <= ((signed(in1) + signed(in2)) < 0);
				z_flag <= ((signed(in1) + signed(in2)) == 0);
			elsif (alu_mode="101") then
				n_flag <= ((signed(in1) - signed(in2)) < signed(0));
				z_flag <= ((signed(in1) - signed(in2)) == signed(0));
			elsif (alu_mode="110") then
				z_flag <= in1(7);
			elsif (alu_mode="111") then
				z_flag <= in1(0);
			end if;
		end if;
	end process;  

	--a <= in1;
	--b <= in2;

	if(rst='1') then
		result <= "00000000";
	elsif (alu_mode="000") then
		result <= in1 NAND in2;
	elsif (alu_mode="100") then
		result <= std_logic_vector(signed(in1) + signed(in2));
	elsif (alu_mode="101") then
		result <= std_logic_vector(signed(in1) - signed(in2));
	elsif (alu_mode="110") then
		result <= in1(6 downto 0)&'0';
	elsif (alu_mode="111") then
		result <= '0'&in1(7 downto 1);
	end if;

end Behavioral;

